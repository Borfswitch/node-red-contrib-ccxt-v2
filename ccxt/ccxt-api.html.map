{"version":3,"sources":["ccxt-api.html"],"names":["  RED.nodes.registerType(\"ccxt-api-v2\", {\n","    category: \"Crypto API\",\n","    defaults: {\n","      name: {\n","        value: \"\"\n","      },\n","      exchange: {\n","        value: \"\",\n","        required: false\n","      allexchanges: {\n","        value: false,\n","        required: true\n","      // exchangeType: {value: \"exchangeList\", required: true},\n","      apitype: {\n","      customapitype: {\n","      api: {\n","      apiprivate: {\n","        value: \"false\",\n","      filtermarkets: {\n","      symbol: {\n","      symbolType: {\n","        value: \"str\",\n","      limit: {\n","        value: undefined,\n","        required: false,\n","        validate: RED.validators.typedInput(\"limitType\")\n","      limitType: {\n","        value: \"num\",\n","      since: {\n","        validate: RED.validators.typedInput(\"sinceType\")\n","      sinceType: {\n","        value: \"datepick\",\n","      timeframe: {\n","      timeframeType: {\n","        value: \"timeframeList\",\n","      ordertype: {\n","        value: \"limit\"\n","      orderside: {\n","        value: \"buy\"\n","      amount: {\n","      orderprice: {\n","      orderid: {\n","      code: {\n","      address: {\n","      tag: {\n","      apisecrets: {\n","        type: \"ccxt-exchange-v2\",\n","      apipayload: {\n","      apipayloadType: {\n","        value: \"none\"\n","      }\n","    },\n","    outputs: 1,\n","    inputs: 1,\n","    color: \"#D8BFD8\",\n","    icon: \"bitcoin.png\",\n","    label: function() {\n","      return this.name || \"ccxt API v2\";\n","    oneditprepare: function() {\n","      //   debugger;\n","      var node = this;\n","      /*\n","                ****************************                           ****************************\n","                ****************************\n","                ****************************    Utility Functions      ****************************\n","      */\n","      function isEmpty(obj) {\n","        for (var key in obj) {\n","          if (obj.hasOwnProperty(key)) return false;\n","        }\n","        return true;\n","                ****************************    Initialisation         ****************************\n","      // initialise select2 on the exchange field ! this will load a nice long drop-down searable list interface\n","      // based on select2. Note: select2 js&css must be added to nodered public vendor folders\n","      // currenctly i loaded it under @node-red/editor-client/public/vendor/select2\n","      // if nodered is installed globally then @node-red will be under /usr/local/lib/node_modules/\n","      // TODO: need to find a way to automatically package select2 and  reference it with installed nodered\n","      //initialise select2 on select input for the field exchange\n","      $(\"#node-input-exchange\").select2({\n","        multiple: \"multiple\",\n","        maximumSelectionLength: 10,\n","        minimumResultsForSearch: 15,\n","        closeOnSelect: false,\n","        allowClear: true,\n","        placeholder: node._(\"ccxt.parameters.exchange\")\n","      });\n","      $(\"#node-input-apipayload\")\n","        .typedInput({\n","          typeField: $(\"#node-input-apipayloadType\"),\n","          types: [\n","            {\n","              value: \"none\",\n","              label: \"None\",\n","              hasValue: false\n","            },\n","            \"json\",\n","            \"msg\"\n","          ]\n","        })\n","        .typedInput(\"width\", \"68%\");\n","      $(\"#node-input-symbol\").typedInput({\n","        typeField: $(\"#node-input-symbolType\"),\n","        default: \"str\",\n","        types: [\n","          \"str\",\n","          {\n","            value: \"symbolList\",\n","            label: \"Pair\",\n","            hasValue: true,\n","            icon: \"typedInput/bitcoin-18.png\",\n","            options: [\"None\"]\n","          },\n","            value: \"allSymbols\",\n","            label: \"All\",\n","            hasValue: false\n","          \"msg\",\n","            value: \"flow\",\n","            label: \"flow.\",\n","            hasValue: true\n","          }\n","        ]\n","      $(\"#node-input-timeframe\").typedInput({\n","        typeField: $(\"#node-input-timeframeType\"),\n","            value: \"timeframeList\",\n","            label: \"Candle size\",\n","            //  hasValue: true,\n","            icon: \"typedInput/timeline.png\",\n","            //default list of values\n","            options: [\"1m\", \"5m\", \"15m\", \"30m\", \"1h\", \"3h\", \"6h\", \"12h\", \"1d\"]\n","          \"flow\"\n","      $(\"#node-input-since\").typedInput({\n","        typeField: $(\"#node-input-sinceType\"),\n","        default: \"datepick\",\n","            value: \"datepick\",\n","            label: \"Date\",\n","            icon: \"typedInput/date-from-18.png\",\n","      $(\"#node-input-limit\").typedInput({\n","        typeField: $(\"#node-input-limitType\"),\n","        default: \"num\",\n","            value: \"num\",\n","            label: \"number\",\n","            icon: \"red/images/typedInput/09.png\",\n","            validate: /^[+-]?[0-9]*\\.?[0-9]*([eE][-+]?[0-9]+)?$/\n","                ****************************    Core Functions         ****************************\n","      function getSymbols(ex, callback) {\n","        //return empty array if no exchange\n","        let symbolslist = [];\n","        if (ex === undefined || ex === \"\" || ex === null) return [];\n","        //show spinner\n","        $(\"#id-loading-svg\").show();\n","        $.getJSON(\n","          \"exchangesymbols\",\n","            exchange: ex\n","          function(result) {\n","            if (callback && typeof callback == \"function\") {\n","              callback(result.symbols);\n","            }\n","            //hide spinner\n","            $(\"#id-loading-svg\").hide();\n","        ).error(function(error) {\n","          //hide spinner\n","          $(\"#id-loading-svg\").hide();\n","          console.log(error);\n","        });\n","      // retrieve Exchanges from server\n","      let getExchanges = function() {\n","        var exchangeElement = $(\"#node-input-exchange\");\n","        $.getJSON(\"exchanges\", function(result) {\n","          exchangeElement.empty();\n","          $.each(result.exchange, function(key, value) {\n","            exchangeElement.append(\n","              $(\"<option />\")\n","                .val(key)\n","                .text(value[0])\n","                .attr(\"homepage\", value[1])\n","                .attr(\"logo\", value[2])\n","                .attr(\"apidoc\", value[3])\n","            );\n","          });\n","          //setting the saved node value\n","          exchangeElement.val(node.exchange);\n","          // var exchange = $(\"#node-input-exchange\").val();\n","          // Setting the dropdown value from javascript (using val()), won't trigger the change-event automatically\n","          $(\"#node-input-exchange\").trigger(\"change\");\n","        }).error(function(error) {\n","      };\n","      // call getExchanges on load\n","      getExchanges();\n","      let showHideAPIPrivateKeys = function() {\n","        //show API Keys\n","        const isPrivate = $(\"#node-input-api option:selected\").attr(\"isprivate\");\n","        const exchange = $(\"#node-input-exchange\").val();\n","        if (isPrivate === \"true\") {\n","          $(\".node-input-private-api\").show();\n","          //  debugger;\n","          if (exchange.length > 1) {\n","            $(\"#node-input-apisecrets\").val(\"_ADD_\");\n","            $(\"#node-input-apisecrets\").prop(\"disabled\", true);\n","          } else $(\"#node-input-apisecrets\").prop(\"disabled\", false);\n","        } else $(\".node-input-private-api\").hide();\n","      // retrieve all supported unified APIs by the exchange\n","      getunifiedAPIs = function() {\n","        //this method always an array so i am using it here instead of converting to an array.\n","        var exchange = $(\"#node-input-exchange\")\n","          .select2(\"data\")\n","          .map(data => data.id);\n","        var apiElement = $(\"#node-input-api\");\n","        apiElement.empty();\n","        apiElement.append(\n","          $(\"<option />\")\n","            .val(\"loadMarkets\")\n","            .text(\"loadMarkets\")\n","        );\n","        if (exchange === undefined || exchange === null || exchange === \"\") return;\n","        if (exchange.length == 0) return;\n","          \"exchangecaps\",\n","            exchange: exchange\n","            result.caps.forEach(function(element) {\n","              apiElement.append(\n","                $(\"<option>\", {\n","                  value: element[0],\n","                  text: element[0],\n","                  isprivate: element[1]\n","                })\n","              );\n","            });\n","            // debugger;\n","            // sort on text\n","            apiElement.html(\n","              apiElement.find(\"option\").sort(function(x, y) {\n","                // to change to descending order switch \"<\" for \">\"\n","                return $(x).text() > $(y).text() ? 1 : -1;\n","              })\n","            //set value if different from saved value\n","            if (node.api !== $(\"#node-input-api\").val()) {\n","              //set the value\n","              apiElement.val(node.api);\n","              // Setting the dropdown value from javascript (using val()),\n","              //won't trigger the change-event automatically\n","              $(\"#node-input-api\").trigger(\"change\");\n","        //\n","      // retrieve all supported custom APIs by the exchange\n","      getcustomAPIs = function() {\n","        //note option:selected ensures that only a single value will be returned\n","        //if a multi-select the first value will be returned only\n","        var exchange = $(\"#node-input-exchange option:selected\").val();\n","        var api = $(\"#node-input-api option:selected\").val();\n","        //Note: custom API can only be issued for a single exchange\n","        if (!exchange || Array.isArray(exchange)) return;\n","          \"apis\",\n","            $.each(Object.keys(result.api), function(index, apitype) {\n","              if (apitype !== \"web\") {\n","                var optgroup = apiElement.find($(\"#node-input-api_\" + apitype));\n","                if (optgroup.length === 0) {\n","                  optgroup = $(\"<optgroup>\");\n","                  optgroup.attr(\"label\", apitype);\n","                  optgroup.attr(\"id\", \"node-input-api_\" + apitype);\n","                  optgroup.attr(\"value\", \"node-input-api_\" + apitype);\n","                }\n","                $.each(Object.keys(result.api[apitype]), function(index, verb) {\n","                  $.each(result.api[apitype][verb], function(index, api) {\n","                    var option = $(\"<option>\", {\n","                      value: verb + \"_\" + api,\n","                      text: verb + \"_\" + api,\n","                      verb: verb,\n","                      customapitype: apitype,\n","                      isprivate: apitype !== \"public\"\n","                    });\n","                    optgroup.append(option);\n","                    // sort on text\n","                    // optgroup.html(\n","                    //   optgroup.find(\"option\").sort(function(x, y) {\n","                    //     // to change to descending order switch \"<\" for \">\"\n","                    //     return $(x).text() < $(y).text() ? 1 : -1;\n","                    //   })\n","                    // );\n","                    apiElement.append(optgroup);\n","                  });\n","                });\n","              }\n","            // set actual value\n","            apiElement.val(node.api);\n","            // Setting the dropdown value from javascript (using val()), won't trigger the change-event automatically\n","            if (api !== node.api) $(\"#node-input-api\").trigger(\"change\");\n","      let getTimeframes = function(ex, callback) {\n","        //timeframes supported by the exchange\n","        const api = $(\"#node-input-api option:selected\").val();\n","        //only relevant to the api fetchOHLCV is supported by ex\n","        if (api !== \"fetchOHLCV\") return [];\n","          \"fetchOHLCVTimeframes\",\n","              //note: we could get an empty list if the api is emulated and not directly supported\n","              //by the api\n","              if (isEmpty(result)) callback([]);\n","              else callback(result);\n","                ****************************    Event Handling         ****************************\n","       **************************** Events : Exchange\n","       */\n","      $(\"#node-input-exchange\").change(function() {\n","        /* single select.\n","          note I use specific way to load the data into select2.\n","          I do not use AJAX data source or remote data sources, rather manually load the options\n","          this means all options are available already on the DOM.\n","          future versions may change this and make use of select2 AJAX data source which minimise the code.\n","          I did that because I used selec2 later on in order to have multi-select and a search box for long lists\n","          after firsly just used native select element\n","          also i may not use select2 in later versions and replace with something like Chosen.js\n","          for this version i depend on select2\n","          it is not recommended to depend on the option selected if you use remote data sources but since I don't then that's ok */\n","        //below call always returns an array on a select2\n","        var exchange = $(\"#node-input-exchange\").val();\n","        if (!exchange) $(\".hidden\").hide();\n","        // another way of getting this would be\n","        //    $(\"#node-input-exchange option:selected\").select2(\"data\")\n","        //    .map(data => data.id);\n","        // $(\"#id-anchor-display-exchange-homepage\").toggle(false);\n","        $(\"#id-anchor-display-exchange-img\").attr(\"src\", \"\");\n","        $(\"#id-anchor-display-exchange-img\").attr(\"alt\", \"\");\n","        if (exchange) {\n","            //disable custom API option if multiple exchanges selected\n","            $(\"#input-apitype-customAPI\").prop(\"disabled\", true);\n","            //ensure value is unifiedAPI only\n","            if ($(\"#node-input-apitype\").val() !== \"unifiedAPI\")\n","              $(\"#node-input-apitype\").val(\"unifiedAPI\");\n","          } else if (exchange.length == 1) {\n","            $(\"#input-apitype-customAPI\").prop(\"disabled\", false);\n","            $(\"#id-img-display-exchange-homepage\").attr(\n","              \"href\",\n","              $(\"#node-input-exchange option:selected\").attr(\"homepage\")\n","            $(\"#id-anchor-display-exchange-img\").attr(\n","              \"src\",\n","              $(\"#node-input-exchange option:selected\").attr(\"logo\")\n","              \"alt\",\n","              $(\"#node-input-exchange option:selected\").text()\n","            // $(\"#id-anchor-display-exchange-homepage\").toggle(true);\n","          $(\"#node-input-apitype\").trigger(\"change\");\n","      //select2 workaround bug fix - dropdown does not close when selecting multiple\n","      //more than the allowed\n","      $(\"#node-input-exchange\").on(\"select2:select\", function(e) {\n","        if (\n","          $(this).select2(\"data\").length >=\n","          $(this).data(\"select2\").results.data.maximumSelectionLength\n","        ) {\n","          $(this).select2(\"close\");\n","       **************************** Events : All Exchanges\n","      $(\"#id-node-input-allexchanges\").click(function() {\n","        $(\"#node-input-allexchanges\").prop(\n","          \"checked\",\n","          !$(\"#node-input-allexchanges\").prop(\"checked\")\n","        $(\"#node-input-allexchanges\").trigger(\"change\");\n","      $(\"#node-input-allexchanges\").change(function() {\n","        const ischecked = $(\"#node-input-allexchanges\").prop(\"checked\");\n","        $(\"#node-input-exchange\").prop(\"disabled\", ischecked);\n","        if (ischecked === true) {\n","          $(\"#allexchanges-toggle-on\").toggle(true);\n","          $(\"#allexchanges-toggle-off\").toggle(false);\n","          $(\"#node-input-apitype\").val(\"unifiedAPI\");\n","          $(\"#input-apitype-customAPI\").prop(\"disabled\", true);\n","          $(\"#node-input-api\").empty();\n","          $(\"#node-input-api\")\n","            .append(\n","                .val(\"loadMarkets\")\n","                .text(\"loadMarkets\")\n","            )\n","            .trigger(\"change\");\n","        } else {\n","          $(\"#allexchanges-toggle-on\").toggle(false);\n","          $(\"#allexchanges-toggle-off\").toggle(true);\n","          $(\"#input-apitype-customAPI\").prop(\"disabled\", false);\n","       **************************** Events : API Type\n","      $(\"#node-input-apitype\").change(function() {\n","        //another way of doing this would be $element.select2(\"data\").map(data => data.id);\n","        var apitype = $(\"#node-input-apitype option:selected\").val();\n","        // if (!apitype)\n","        $(\".hidden\").hide();\n","        //empty the api because the type has changed\n","        if (exchange !== undefined && exchange !== \"\" && exchange !== null) {\n","          if (apitype === \"customAPI\") {\n","            $(\"#id-anchor-display-exchange-apidoc\").attr(\n","              $(\"#node-input-exchange option:selected\").attr(\"apidoc\")\n","          } else {\n","              \"https://ccxt.readthedocs.io/en/latest/manual.html#api-methods-endpoints\"\n","        if (apitype !== \"\") {\n","          if (apitype === \"unifiedAPI\") getunifiedAPIs();\n","          if (apitype === \"customAPI\") getcustomAPIs();\n","       **************************** Events : API\n","      $(\"#node-input-api\").change(function(type, value) {\n","        const apitype = $(\"#node-input-apitype option:selected\").val();\n","        if (!api) $(\".hidden\").hide();\n","        if (apitype === \"customAPI\") {\n","          showHideAPIPrivateKeys();\n","          // for customAPI show the API Payload parameter only\n","          $(\".node-input-api-custom\").show();\n","          var params = null;\n","          var currValue = {};\n","          if (api && $(\"#node-input-apipayload\").typedInput(\"type\") === \"json\") {\n","            // api = api.toLowerCase();\n","            currValue = $(\"#node-input-apipayload\").typedInput(\"value\")\n","              ? JSON.parse($(\"#node-input-apipayload\").typedInput(\"value\"))\n","              : {};\n","          var newValue = {};\n","          if (api)\n","            //match {queryparameteranyWordorNumber}\n","            params = api.match(/{((?:[a-zA-Z0-9\\_][a-zA-Z0-9\\_]+))}/g);\n","          //if we found queryparams in the api\n","          if (params !== null && !$(\"#node-input-apipayload\").typedInput(\"value\")) {\n","            $(\"#node-input-apipayload\").typedInput(\"type\", \"json\");\n","            //   if (currValue !== \"\") currValue = JSON.parse(currValue);\n","            var arr = [];\n","            var apipayload = \"\";\n","            var paramKey = \"\";\n","            var x = \"\";\n","            params.map(function(x) {\n","              paramKey = x.replace(\"{\", \"\").replace(\"}\", \"\");\n","              arr.push(paramKey);\n","            if (arr.length > 0) {\n","              x = arr.shift();\n","              while (x) {\n","                if (currValue[x]) newValue[x] = currValue[x];\n","                else newValue[x] = \"your_value_here\";\n","                x = arr.shift();\n","            //FIXME: This is possibly fixed in latest release of nodered\n","            // add currvalue to newvalue so any keys which existed only on current value are retained - how would i know if the key is valid for the api or not though ?\n","            // the key maybe valid for another api\n","            //  apipayload = \"{\\n\" + apipayload + \"\\n}\";\n","            //if ($(\"#node-input-apipayload\").typedInput(\"value\") === \"\") {\n","            $(\"#node-input-apipayload\").typedInput(\"value\", JSON.stringify(newValue));\n","          } else if (!$(\"#node-input-apipayload\").typedInput(\"value\"))\n","            $(\"#node-input-apipayload\").typedInput(\"type\", \"none\");\n","        // Get the params for the unified API if an API is selected\n","        if (apitype === \"unifiedAPI\") {\n","          if (api !== undefined && api !== \"\") {\n","            $.getJSON(\n","              \"apiparams\",\n","              {\n","                api: api\n","              },\n","              function(result) {\n","                //start by hiding all params\n","                $(\".hidden\").hide();\n","                showHideAPIPrivateKeys();\n","                result.apiparams.map(function(x) {\n","                  //special handling for some params\n","                  // i dont know why am i triggering change here .. this is not right\n","                  // trying to fix this ... this is not safe for calling from both symbol and timefram\n","                  if (x === \"symbol\") {\n","                    $(\"#node-input-symbol\").trigger(\n","                      \"change\",\n","                      $(\"#node-input-symbolType\").val()\n","                    );\n","                  }\n","                  if (x === \"timeframe\") {\n","                    $(\"#node-input-timeframe\").trigger(\"change\", \"timeframes\");\n","                  // parameter is api payload then custom api\n","                  if (x === \"apipayload\") $(\".node-input-api-custom\").show();\n","                  // it is unified api. show the parameter field\n","                  else {\n","                    // console.log(\"value of x is \", x);\n","                    $(\".node-input-unified-api-\" + x).show();\n","                    // this is just insane! the following style is added. could not otherwise do it\n","                    // so that the input is displayed nicely next to the icon of the typedInput\n","                    // no idea why the typedInput when adding a class gets shifted to the left a little\n","                    // and makes the icon of the typedInput disappear\n","                    // to workaround this I had to set the left attribute manually\n","                    // since 40px is the fixed width of the typedInput icon\n","                    // i am strill struggling with the issue that for msg & flow also the margin-left is not set propertly.\n","                    //the below code is aweful and buggy dont know why i had to do this .. need to research this problem\n","                    //for some reason styles of those typedInput fields need some massaging !\n","                    if (\n","                      x === \"timeframe\" ||\n","                      x === \"since\" ||\n","                      x === \"symbol\" ||\n","                      x === \"limit\" ||\n","                      x === \"apipayload\"\n","                    ) {\n","                      if (\n","                        $(\"#node-input-\" + x).typedInput(\"type\") !== \"msg\" &&\n","                        $(\"#node-input-\" + x).typedInput(\"type\") !== \"flow\"\n","                      )\n","                        $(\n","                          \".node-input-unified-api-\" + x + \" .red-ui-typedInput-input\"\n","                        ).css(\"left\", \"40px\");\n","                    }\n","       **************************** Events : Symbol\n","      $(\"#node-input-symbol\").on(\"change\", function(type, value) {\n","        //Initialise select2 on field\n","        //&show hide the right elements\n","        var inputSelectSymbolElem = $(\"#id-input-select-symbol\");\n","        inputSelectSymbolElem.empty();\n","        //value is true if at first load and no change\n","        // const symbolType = $(\"#node-input-symbolType\").val();\n","        if (value === \"symbolList\") {\n","          var exchange = $(\"#node-input-exchange\").val() || node.exchange;\n","          //init select2\n","          inputSelectSymbolElem.select2({\n","            multiple: \"multiple\",\n","            maximumSelectionLength: 5,\n","            minimumResultsForSearch: 10,\n","            closeOnSelect: false,\n","            allowClear: true,\n","            placeholder: node._(\"ccxt.parameters.symbolselect\")\n","          // hide the symbolslist typedInput\n","          let typedInputContainerElement = $(\n","            \".node-input-unified-api-symbol > .red-ui-typedInput-container\"\n","          );\n","          //typedInputContainerElement\n","          $(\"#node-input-symbol\").typedInput(\"width\", \"40px\");\n","          //  let select2Container = $(\"#id-input-select-symbol\").data(\"select2\").$container;\n","          let select2Container = inputSelectSymbolElem.siblings(\".select2-container\");\n","          select2Container.attr(\"style\", \"width:62%\");\n","          /*            //append and style the element\n","              let select2Container = inputSelectSymbolElem.siblings(\".select2-container\");\n","              select2Container\n","                .appendTo(typedInputContainerElement)\n","                .attr(\"style\", \"left:40px;width: calc(100% - 40px);\");\n","                .find(\".select2-selection\")\n","                .attr(\"style\", \"border: none;height: 32px\"); */\n","          //find the button and hide it\n","          typedInputContainerElement.find(\".red-ui-typedInput-option-trigger\").hide();\n","          typedInputContainerElement.find(\".red-ui-typedInput-input\").hide();\n","          getSymbols(exchange, function(symbols) {\n","            symbols.forEach(function(element) {\n","              inputSelectSymbolElem.append(\n","                  value: element,\n","                  text: element\n","            // set the value of the field\n","            if ($(\"#node-input-symbol\").val()) {\n","              //remember this is a typedInput fields and it looks like you cant store an array ! need confirmation\n","              //therefore i am transforming between strings and arrays in save and load (using .split(',') to load from string)\n","              inputSelectSymbolElem.val(\n","                $(\"#node-input-symbol\")\n","                  .val()\n","                  .split(\",\")\n","            } else inputSelectSymbolElem.val(node.symbol.split(\",\"));\n","            inputSelectSymbolElem.trigger(\"change\");\n","          //   let select2Container = $(\"#id-input-select-symbol\").data(\"select2\").$container;\n","          select2Container.remove();\n","          if (value === \"str\") $(\"#node-input-symbol\").typedInput(\"width\", \"68%\");\n","          else $(\"#node-input-symbol\").typedInput(\"width\", \"40%\");\n","          //typedInputContainerElement.find(\".red-ui-typedInput-input\").show();\n","      // Symbol select2 drop down\n","      $(\"#id-input-select-symbol\").on(\"select2:select\", function(e) {\n","      // Symbol field select2 save\n","      $(\"#id-input-select-symbol\").change(function(type, v) {\n","        //will always return an array\n","        let val = $(\"#id-input-select-symbol\").val();\n","        // we need to save the value as a string only\n","        // since this is a typedInput field, it does not accept an array\n","        if (val !== null) {\n","          if (Array.isArray(val) && val.length > 0) {\n","            let sval = val.join(\",\");\n","            if (\n","              $(\"#node-input-symbolType\").val() === \"symbolList\" &&\n","              $(\"#node-input-symbol\").val() !== sval\n","              $(\"#node-input-symbol\").val(sval);\n","          } else $(\"#node-input-symbol\").val(null);\n","        } else $(\"#node-input-symbol\").val(null);\n","       **************************** Events : Since\n","      $(\"#node-input-since\").on(\"change\", function(type, value) {\n","        // the trick here is that I show the date field instead of a text so that\n","        // the browser can show a nice date picker for the field\n","        // whereas when choosing msg or flow .. it is expecting a string\n","        // and so i just hide my custom date picker field.\n","        // the change of date on my custom input date field is captured and value is copied to the actual node field\n","        if (value === true)\n","          $(\"#id-input-since\").appendTo(\n","            \".node-input-unified-api-since.hidden > .red-ui-typedInput-container > .red-ui-typedInput-input\"\n","        else if (value === \"datepick\") {\n","          $(\n","            \".node-input-unified-api-since.hidden > .red-ui-typedInput-container > .red-ui-typedInput-input > input[type=text]\"\n","          ).hide();\n","          $(\"#id-input-since\").show();\n","        } else if (value === \"msg\" || value === \"flow\") {\n","          $(\"#id-input-since\").hide();\n","          ).show();\n","          value === true &&\n","          ($(\"#node-input-sinceType\").val() === \"datepick\" ||\n","            node.sinceType === \"datepick\")\n","          $(\"#id-input-since\").val($(\"#node-input-since\").val() || node.since);\n","      $(\"#id-input-since\").change(function() {\n","          $(\"#node-input-sinceType\").val() === \"datepick\" &&\n","          $(\"#node-input-since\").val() !== $(\"#id-input-since\").val()\n","          $(\"#node-input-since\").val($(\"#id-input-since\").val());\n","          $(\"#id-input-since\").val()\n","          var parsedDate = new Date($(\"#id-input-since\").val()).getTime();\n","          $(\"#label-node-input-sinceMseconds\").val(parsedDate);\n","          $(\"#label-node-input-sinceMseconds\").show();\n","        } else $(\"#label-node-input-sinceMseconds\").hide();\n","       **************************** Events : Timeframe\n","      $(\"#node-input-timeframe\").on(\"change\", function(type, value) {\n","        //this happens only when you open the editor for first time\n","        if (value === true && $(\"#node-input-timeframe\").val() !== node.timeframe) {\n","          $(\"#node-input-timeframe\").typedInput(\"value\", node.timeframe);\n","        // the value contains timeframeType\n","        if (value === \"timeframes\") {\n","          var exchange = $(\"#node-input-exchange\").val();\n","          let timeframes = [];\n","          if (exchange !== null && exchange.length >= 0) {\n","            getTimeframes(exchange, function(results) {\n","              if (results === null) {\n","                // if timeframes are not returned from the exchange\n","                // this means that the OHLCV is an emulated api\n","                // read about emulated api. here is a list of possible values for timeframe\n","                // you could also try setting the value manually using string as the type then enter\n","                // the value you want to be sent to the api\n","                // TODO: this should indicate an error on the interface rather than show this\n","                $(\"#id-emulated-api\").show();\n","                timeframes = [];\n","              if (results !== null) {\n","                if (results.fetchOHLCVunsupported === true) {\n","                  // TODO: this should indicate an error on the interface rather than show this\n","                  // also results.fetchOHLCVunsupportedby will contain the id of the exchange which does not support fetchOHLCV call\n","                  $(\"#id-emulated-api\").show();\n","                  timeframes = [];\n","                } else if (results.fetchOHLCVemulated === true) {\n","                  timeframes = results.results.timeframes;\n","                } else {\n","                  $(\"#id-emulated-api\").hide();\n","              $(\"#node-input-timeframe\")\n","                .typedInput(\"types\", [\n","                  {\n","                    value: \"timeframeList\",\n","                    label: \"Candle size\",\n","                    //  hasValue: true,\n","                    icon: \"typedInput/timeline.png\",\n","                    options: timeframes\n","                  },\n","                  \"str\",\n","                  \"msg\",\n","                  \"flow\"\n","                  //if you want to recieve events hasValue: true somehow needed!\n","                ])\n","                .typedInput(\"width\", \"37%\");\n","              //after loading new options, it is important to try set the configured value or the saved value\n","              //if the value doe not exist in the list\n","              $(\"#node-input-timeframe\").typedInput(\n","                \"value\",\n","                $(\"#node-input-timeframe\").val() || node.timeframe\n","       **************************** Events : Limit\n","      $(\"#node-input-limit\").on(\"change\", function() {\n","        //setting defaults here..\n","          $(\"#node-input-limit\").typedInput(\"type\") === \"msg\" &&\n","          $(\"#node-input-limit\").typedInput(\"value\") === \"\"\n","          $(\"#node-input-limit\").typedInput(\"value\", \"payload\");\n","       **************************** Events : OrderType\n","      $(\"#node-input-ordertype\").change(function() {\n","        $(\"#node-input-ordertype option:selected\").val() === \"market\"\n","          ? $(\"#node-input-orderprice\").attr(\"readonly\", true)\n","          : $(\"#node-input-orderprice\").attr(\"readonly\", false);\n","    oneditsave: function() {\n","      const isallexchanges = $(\"#node-input-allexchanges\").prop(\"checked\");\n","      //save exchange property\n","      if (isallexchanges === true && $(\"#node-input-exchange\").val().length !== 0)\n","        node.exchange = $(\"#node-input-exchange\").val([]);\n","      //comparing arrays change to strings first\n","      else if (\n","        node.exchange.toString() !==\n","        $(\"#node-input-exchange\")\n","          .val()\n","          .toString()\n","      )\n","        node.exchange = $(\"#node-input-exchange\").val();\n","      if (node.api !== $(\"#node-input-api option:selected\").val())\n","        node.api = $(\"#node-input-api option:selected\").val();\n","      if (node.apiprivate !== $(\"#node-input-api option:selected\").attr(\"isprivate\"))\n","        node.apiprivate = $(\"#node-input-api option:selected\").attr(\"isprivate\");\n","      // symbol storage handling\n","      if ($(\"#node-input-symbolType\").val() === \"symbolList\") {\n","        const symbolval = $(\"#id-input-select-symbol\").val();\n","        if (symbolval) {\n","          if (Array.isArray(symbolval) && symbolval.length > 0) {\n","            const v = $(\"#id-input-select-symbol\")\n","              .val()\n","              .join(\",\");\n","            if (node.symbol !== v) node.symbol = v;\n","          } else if (node.symbol !== \"\") node.symbol = \"\";\n","        } else if (node.symbol !== \"\") node.symbol = \"\";\n","      if ($(\"#node-input-symbolType\").val() === \"allSymbols\" && node.symbol !== \"all\") {\n","        node.symbol = \"all\";\n","      // timeframe storage handling\n","      if (\n","        $(\"#node-input-timeframeType\").val() === \"timeframeList\" &&\n","        node.timeframe !== $(\"#node-input-timeframe\").val()\n","        node.timeframe = $(\"#node-input-timeframe\").val();\n","      if ($(\"#node-input-apitype option:selected\").val() === \"customAPI\")\n","          node.customapitype !==\n","          $(\"#node-input-api option:selected\").attr(\"customapitype\")\n","        )\n","          $(\"#node-input-customapitype\").val(\n","            $(\"#node-input-api option:selected\").attr(\"customapitype\")\n","      // set Name if undefined\n","      if (!$(\"#node-input-name\").val()) {\n","        if (Array.isArray(node.exchange) && node.exchange.length > 1 && node.api) {\n","          $(\"#node-input-name\").val(\n","            $(\"#node-input-exchange\").select2(\"data\")[0].text +\n","              \" & \" +\n","              (node.exchange.length - 1).toString() +\n","              \" more : \" +\n","              $(\"#node-input-api option:selected\").text()\n","        } else if (\n","          Array.isArray(node.exchange) &&\n","          node.exchange.length == 1 &&\n","          node.api\n","              \" : \" +\n","        } else if (node.exchange && node.api) {\n","            $(\"#node-input-exchange option:selected\").text() +\n","        if (isallexchanges && node.api)\n","          $(\"#node-input-name\").val(\"All exchanges : \" + node.api);\n","    }\n","  });\n","  //# sourceURL=/ccxt/ccxt-api.html\n","  //# sourceMappingURL=/ccxt/ccxt-api.html.map\n"],"mappings":";AA+YAA;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAH;AACAI;AACAC;AACAC;AACAN;AACAO;AACAC;AACAN;AACAI;AACAN;AACAS;AACAP;AACAC;AACAH;AACAU;AACAR;AACAI;AACAN;AACAW;AACAC;AACAN;AACAN;AACAa;AACAX;AACAC;AACAH;AACAc;AACAZ;AACAC;AACAH;AACAe;AACAC;AACAb;AACAH;AACAiB;AACAC;AACAC;AACAC;AACApB;AACAqB;AACAC;AACAnB;AACAH;AACAuB;AACAL;AACAM;AACAxB;AACAyB;AACAC;AACAvB;AACAH;AACA2B;AACA5B;AACAC;AACA4B;AACAC;AACA1B;AACAH;AACA8B;AACAC;AACA/B;AACAgC;AACAC;AACAjC;AACAkC;AACAnC;AACAC;AACAmC;AACApC;AACAC;AACAoC;AACArC;AACAC;AACAqC;AACAtC;AACAC;AACAsC;AACAvC;AACAC;AACAuC;AACAxC;AACAC;AACAwC;AACAC;AACAtC;AACAH;;AAEA0C;AACAxC;AACAC;AACAH;AACA2C;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAN;AACAO;AACAC;AACAC;;AAEAC;;AAEAC;AACAC;AACAC;AACAF;AACAA;AACAG;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACApB;AACAW;;AAEAC;AACAC;AACAQ;AACAT;AACAA;AACAG;AACAO;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAN;AACAO;AACAC;AACAC;AACAH;AACAI;AACAV;AACAW;AACAC;AACAC;AACAC;AACAC;AACAnC;;AAEAoC;AACAC;AACAnB;AACAE;AACAkB;AACAC;AACAC;AACAC;AACAC;AACAC;AACAjB;AACAP;AACAW;AACAc;AACAT;AACAnC;;AAEA6C;AACAC;AACAC;AACA7B;AACAE;AACA4B;AACAC;AACAC;AACAjB;AACAP;AACAI;AACAV;AACAW;AACAC;AACAC;AACAC;AACAC;AACAnC;;AAEAmD;AACAC;AACAC;AACAnC;AACAE;AACAkC;AACAC;AACAC;AACAC;AACA/B;AACAI;AACAV;AACAW;AACAC;AACAC;AACAC;AACAC;AACAnC;;AAEAxB;;AAEAC;AACAC;AACAgF;AACAjF;AACAA;AACAG;;AAEA+E;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACA9C;AACA+C;AACAzC;AACA0C;AACAC;AACAC;AACAC;AACAC;AACAC;AACAvC;AACAwC;AACAC;AACAC;AACAC;AACAC;AACAjH;;AAEAkH;AACAC;AACAC;AACAlB;AACAC;AACAkB;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;;AAEAvB;AACAC;AACAuB;AACAtB;AACAC;AACAsB;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAd;AACAe;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAlE;AACAC;;AAEAC;AACAiE;AACA9G;AACA+G;AACAzG;AACA0C;AACAgE;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAvD;AACAwD;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAnF;AACAC;AACAC;AACAvC;AACAwC;AACAG;AACAC;AACA6E;AACAvD;AACAwD;AACAC;AACAC;AACAC;AACAC;AACAvC;AACAwC;AACAvC;AACAwC;AACAC;;AAEApG;AACAC;AACAC;AACAmG;AACAhJ;AACA+G;AACAzG;AACA0C;AACAiG;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAtD;;AAEAuD;AACAC;AACAC;AACAC;AACA9H;AACAC;AACAvC;AACAwC;AACAG;AACAC;;AAEA6E;AACAvD;;AAEAmG;AACAC;;AAEA1I;AACA2I;;AAEAC;AACAC;;AAEA5I;AACAC;AACAC;AACA2I;AACAxL;AACA+C;AACAzC;AACA0C;AACAC;AACAwI;AACAC;AACAC;AACAC;AACAzI;AACAC;AACAC;AACAvC;AACAwC;AACAG;AACAC;AACAsB;;AAEA5H;;AAEAC;AACAC;AACAuO;AACAxO;AACAA;AACAG;;AAEAJ;AACA0O;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACA1H;AACA2H;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAtJ;AACAuJ;AACAC;AACAC;AACAzJ;AACAuJ;AACAG;AACAC;AACA3J;AACA4J;AACAtN;;AAEAuN;AACAzQ;AACAgB;;AAEA0P;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAjR;AACAgB;;AAEAxB;AACA0R;AACA/C;;AAEAgD;AACAC;AACAC;AACAC;AACAvI;AACAwI;AACAvQ;;AAEAwQ;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACA5L;AACA6L;AACAC;AACAC;AACAxJ;AACAyJ;AACAC;AACAC;AACAC;;AAEAC;AACAxL;AACAlH;AACAgB;AACAxB;AACAmT;AACAxE;AACAyE;AACA5D;AACA6D;AACAC;AACAC;AACAC;AACAC;AACAxK;AACAC;AACAwK;AACAC;AACAC;AACAnD;AACAoD;AACAzM;AACA0M;AACAF;AACAnD;AACAsD;AACA3M;AACA1D;AACAlD;;AAEAwT;AACAC;AACAC;AACA1T;AACAgB;;AAEAxB;AACAmU;AACAxF;;AAEAyF;AACAC;AACApG;AACAqG;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAvR;AACAwR;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;;AAEAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACA5L;AACA6L;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACA5I;AACA3H;AACAwQ;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAtW;AACAuW;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAF;;AAEAG;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAhC;AACA3K;AACAC;AACAtG;AACA1D;AACAlD;AACAgB;;AAEAxB;AACAqa;AACA1L;;AAEA2L;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAjU;AACAkU;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;;AAEAC;AACAC;;AAEAC;AACAC;AACAC;;AAEAF;AACAG;AACAC;;AAEAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACA9S;AACA+S;AACAC;AACA5S;AACAC;AACAC;;AAEA2S;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAnT;AACAoT;;AAEAC;AACAnW;AACA0L;AACAyI;AACAC;AACAC;AACAI;AACA2B;AACAC;AACAC;AACAC;AACAC;AACArd;AACAgB;AACAsc;AACAC;AACA1M;AACAC;AACAC;AACAC;AACAC;AACAjR;AACAgB;AACAwc;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACA9L;AACA+L;AACAC;AACAC;AACAtd;;AAEAxB;AACA+e;AACApQ;;AAEAqQ;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACA9D;AACA+D;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAL;AACAC;AACAK;AACAxf;AACA6Q;AACA4O;AACAC;AACAC;AACA3O;AACA4O;AACAV;AACAC;AACAC;;AAEAC;AACArf;AACAgB;;AAEA6e;AACAhP;AACAiP;AACAC;AACA/O;AACAgP;AACAhgB;AACA6Q;AACAiP;AACAG;AACAjP;AACAkP;AACAC;;AAEAC;AACAC;AACArf;;AAEAxB;AACA8gB;AACAnS;;AAEAoS;AACAC;AACAC;AACAC;AACA1gB;AACA2gB;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAvU;AACAwU;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAF;AACAG;AACAC;AACAC;AACAF;AACApW;AACAqB;AACAkV;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACA5Z;AACAC;AACA1G;AACAlD;AACAgB;AACAxB;AACAgkB;AACArV;;AAEAsV;AACAC;AACA7S;AACA8S;AACAC;AACA5S;AACA6S;AACA7jB;AACAgB;;AAEAxB;AACAskB;AACA3V;;AAEA4V;AACAC;AACAC;AACAC;AACAljB;AACAlC;AACAqlB;AACA5kB;AACA6kB;;AAEAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;;AAEAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAjnB;;AAEAknB;AACAC;AACAnnB;AACAonB;AACAC;AACAC;AACAC;AACAtB;AACAuB;AACAC;AACAzV;AACA0V;AACAC;AACAC;AACAC;AACAC;AACAzL;;AAEA0L;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAlM;AACAmM;AACAC;AACAC;AACAC;AACAxW;AACA+V;AACAC;AACAS;AACAL;AACAlM;AACAwM;AACAX;AACAY;AACAF;AACAL;AACAlM;AACAlb;AACA4nB;AACAC;AACAhpB;AACAipB;AACAC;AACAC;AACAC","file":"/ccxt/ccxt-api.html","sourceRoot":"/ccxt/"}